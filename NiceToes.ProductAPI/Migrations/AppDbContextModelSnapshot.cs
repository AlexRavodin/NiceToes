// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NiceToes.ProductAPI.Data;

#nullable disable

namespace NiceToes.ProductAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NiceToes.ProductAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryName = "Winter",
                            Description = "For cold walks.",
                            ImageUrl = "https://localhost:7000/Images/1.jpg",
                            Name = "Boots",
                            Price = 400.0
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryName = "Winter",
                            Description = "For business meetings.",
                            ImageUrl = "https://localhost:7000/Images/2.jpg",
                            Name = "Shoes",
                            Price = 450.0
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryName = "Summer",
                            Description = "For doing sports.",
                            ImageUrl = "https://localhost:7000/Images/3.jpg",
                            Name = "Trainers",
                            Price = 300.0
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryName = "Scene",
                            Description = "For dancing.",
                            ImageUrl = "https://localhost:7000/Images/4.jpg",
                            Name = "Ballet shoes",
                            Price = 100.0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
